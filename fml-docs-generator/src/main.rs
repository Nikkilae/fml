
use std::path::Path;
use std::env;
use std::error::Error;
use std::fs;
use std::fs::{File};
use std::io::{BufWriter, Write};

mod pages;
mod parser;
mod renderer;

struct Args {
    yy_directory: String,
    docs_directory: String,
}

fn get_args() -> Option<Args> {
    let args: Vec<String> = env::args().collect();
    match args.len() {
        3 => Some(Args {
            yy_directory: args[1].clone(),
            docs_directory: args[2].clone(),
        }),
        _ => None,
    }
}

fn main() -> Result<(), Box<dyn Error>> {

    let args = get_args().unwrap();

    println!("");
    println!("Yy directory: {}", &args.yy_directory);
    println!("Docs directory: {}", &args.docs_directory);
    println!("");

    let all_pages = pages::parse_pages(&args.yy_directory, &args.docs_directory);

    let autogen_refs_dir = Path::new(&args.docs_directory).join("ref");
    println!("Deleting directory {}...", autogen_refs_dir.display());
    fs::remove_dir_all(autogen_refs_dir)?;

    println!("Rendering {} API ref pages...", all_pages.len());
    for page in &all_pages {
        fs::create_dir_all(page.doc_filename.parent().unwrap())?;
        let mut page_bw = BufWriter::new(File::create(&page.doc_filename)?);
        page_bw.write_all("\n<!-- Autogenerated -->\n".as_bytes())?;
        renderer::render_page(page, &all_pages, &mut page_bw)?;
    }

    println!("");

    let sidebar_filename = Path::new(&args.docs_directory).join("_sidebar.md");
    let mut sidebar_bw = BufWriter::new(File::create(&sidebar_filename)?);
    println!("Rendering {}...", sidebar_filename.display());
    sidebar_bw.write_all("\n<!-- Autogenerated -->\n".as_bytes())?;
    renderer::render_sidebar(&all_pages, &mut sidebar_bw)?;

    println!("");

    let ref_filename = Path::new(&args.docs_directory).join("ref.md");
    let mut ref_bw = BufWriter::new(File::create(&ref_filename)?);
    println!("Rendering {}...", ref_filename.display());
    ref_bw.write_all("\n<!-- Autogenerated -->\n".as_bytes())?;
    renderer::render_ref(&all_pages, &mut ref_bw)?;

    println!("");

    println!("Done.");

    Ok(())
}
